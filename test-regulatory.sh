#!/bin/bash

# Script de Test Complet - Module Veille R√©glementaire
# Audit approfondi de toutes les fonctionnalit√©s

echo ""
echo "üîç ====== AUDIT COMPLET - MODULE VEILLE R√âGLEMENTAIRE ======"
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

PASS=0
FAIL=0
TOTAL=0

# Test 1: Status endpoint
echo "üìä Test 1: V√©rification statut syst√®me..."
TOTAL=$((TOTAL + 1))
RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:5000/api/regulatory/status 2>/dev/null)
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | sed '$d')

if [ "$HTTP_CODE" == "200" ]; then
    echo -e "${GREEN}‚úÖ Status endpoint OK${NC}"
    echo "   Response: $(echo $BODY | head -c 100)..."
    PASS=$((PASS + 1))
else
    echo -e "${RED}‚ùå Status endpoint failed: HTTP $HTTP_CODE${NC}"
    FAIL=$((FAIL + 1))
fi

# Test 2: Get updates
echo ""
echo "üì∞ Test 2: R√©cup√©ration mises √† jour r√©glementaires..."
TOTAL=$((TOTAL + 1))
RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:5000/api/regulatory/updates 2>/dev/null)
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

if [ "$HTTP_CODE" == "200" ]; then
    echo -e "${GREEN}‚úÖ Updates endpoint OK${NC}"
    PASS=$((PASS + 1))
else
    echo -e "${RED}‚ùå Updates endpoint failed: HTTP $HTTP_CODE${NC}"
    FAIL=$((FAIL + 1))
fi

# Test 3: Sync (workflow multi-agents)
echo ""
echo "üîÑ Test 3: Synchronisation multi-agents (peut prendre 30-60s)..."
TOTAL=$((TOTAL + 1))
START_TIME=$(date +%s)
RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:5000/api/regulatory/sync --max-time 120 2>/dev/null)
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | sed '$d')

if [ "$HTTP_CODE" == "200" ]; then
    echo -e "${GREEN}‚úÖ Sync workflow OK (dur√©e: ${DURATION}s)${NC}"
    echo "   Response: $BODY"
    PASS=$((PASS + 1))
else
    echo -e "${RED}‚ùå Sync failed: HTTP $HTTP_CODE${NC}"
    FAIL=$((FAIL + 1))
fi

# Test 4: Filter by source
echo ""
echo "üîç Test 4: Filtrage par source..."
SOURCES=("Commission%20Europ%C3%A9enne" "CNIL" "AI%20Office")
for source in "${SOURCES[@]}"; do
    TOTAL=$((TOTAL + 1))
    RESPONSE=$(curl -s -w "\n%{http_code}" "http://localhost:5000/api/regulatory/updates?source=$source" 2>/dev/null)
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

    if [ "$HTTP_CODE" == "200" ]; then
        echo -e "${GREEN}‚úÖ Filter by source OK${NC}"
        PASS=$((PASS + 1))
    else
        echo -e "${RED}‚ùå Filter by source failed: HTTP $HTTP_CODE${NC}"
        FAIL=$((FAIL + 1))
    fi
done

# Test 5: Filter by severity
echo ""
echo "‚ö†Ô∏è  Test 5: Filtrage par s√©v√©rit√©..."
SEVERITIES=("critique" "important" "info")
for severity in "${SEVERITIES[@]}"; do
    TOTAL=$((TOTAL + 1))
    RESPONSE=$(curl -s -w "\n%{http_code}" "http://localhost:5000/api/regulatory/updates?severity=$severity" 2>/dev/null)
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

    if [ "$HTTP_CODE" == "200" ]; then
        echo -e "${GREEN}‚úÖ Filter by severity '$severity' OK${NC}"
        PASS=$((PASS + 1))
    else
        echo -e "${RED}‚ùå Filter by severity '$severity' failed: HTTP $HTTP_CODE${NC}"
        FAIL=$((FAIL + 1))
    fi
done

# R√©sum√©
echo ""
echo ""
echo "üìä ====== R√âSUM√â DES TESTS ======"
echo ""
SUCCESS_RATE=$(echo "scale=1; ($PASS / $TOTAL) * 100" | bc)
echo -e "${GREEN}‚úÖ PASS: $PASS${NC}"
echo -e "${RED}‚ùå FAIL: $FAIL${NC}"
echo -e "üìà Taux de r√©ussite: ${SUCCESS_RATE}%"
echo ""

if [ $FAIL -eq 0 ]; then
    echo -e "${GREEN}üéâ Tous les tests sont pass√©s !${NC}"
    exit 0
else
    echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√©${NC}"
    exit 1
fi
